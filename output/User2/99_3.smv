--IF Smoke Sensor.smoke = detected THEN Alarm.both
--IF Camera.take photo THEN Sina Weibo.post(Camera.photo)
--IF Alarm.AlertState = both THEN Camera.take photo
--IF Gas Sensor.gas > 70 THEN Alarm.both

MODULE GasSensor
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_gas: {untrusted, trusted};
VAR
	gas: 0..100;
ASSIGN
	init(trust_gas):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE SinaWeibo
FROZENVAR
	is_attack: boolean;
VAR
	State: {idle, posting};
	post_a: boolean;
	trust_State_idle: {untrusted, trusted};
	trust_State_posting: {untrusted, trusted};
	privacy_content: {private, public};
ASSIGN
	init(State) := idle;
	init(post_a) := FALSE;
	init(trust_State_idle) := trusted;
	init(trust_State_posting) := trusted;
	init(privacy_content) := public;

MODULE SmokeSensor
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_smoke: {untrusted, trusted};
VAR
	smoke: {clear, detected, tested};
ASSIGN
	init(trust_smoke):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE Alarm
FROZENVAR
	is_attack: boolean;
VAR
	AlertState: {both, off, siren, strobe};
	both_a: boolean;
	off_a: boolean;
	siren_a: boolean;
	strobe_a: boolean;
	trust_AlertState_both: {untrusted, trusted};
	trust_AlertState_off: {untrusted, trusted};
	trust_AlertState_siren: {untrusted, trusted};
	trust_AlertState_strobe: {untrusted, trusted};
ASSIGN
	init(AlertState) := both;
	init(both_a) := FALSE;
	init(off_a) := FALSE;
	init(siren_a) := FALSE;
	init(strobe_a) := FALSE;
	init(trust_AlertState_both) := trusted;
	init(trust_AlertState_off) := trusted;
	init(trust_AlertState_siren) := trusted;
	init(trust_AlertState_strobe) := trusted;

MODULE Camera
FROZENVAR
	is_attack: boolean;
VAR
	MachineState: {off, on, takingphoto};
	on_a: boolean;
	off_a: boolean;
	takephoto_a: boolean;
	trust_MachineState_off: {untrusted, trusted};
	trust_MachineState_on: {untrusted, trusted};
	trust_MachineState_takingphoto: {untrusted, trusted};
	privacy_photo: {private};
ASSIGN
	init(MachineState) := on;
	init(on_a) := FALSE;
	init(off_a) := FALSE;
	init(takephoto_a) := FALSE;
	init(trust_MachineState_on) := trusted;
	init(trust_MachineState_off) := trusted;
	init(trust_MachineState_takingphoto) := trusted;

MODULE main
FROZENVAR
	intensity: 0..50;
VAR
	gassensor: GasSensor;
	sinaweibo: SinaWeibo;
	smokesensor: SmokeSensor;
	alarm: Alarm;
	camera: Camera;
	a_gas: 0..100;
	a_smoke: {clear, detected, tested};
ASSIGN
	init(intensity) := 0 + toint(gassensor.is_attack) + toint(sinaweibo.is_attack) + toint(smokesensor.is_attack) + toint(alarm.is_attack) + toint(camera.is_attack);

	next(sinaweibo.State) :=
	case
		camera.takephoto_a = TRUE & sinaweibo.is_attack=FALSE: posting;
		sinaweibo.State=posting: idle;
		sinaweibo.State=idle: {idle, posting};
		sinaweibo.State=posting: {posting};
		TRUE: sinaweibo.State;
	esac;

	next(alarm.AlertState) :=
	case
		smokesensor.smoke=detected & alarm.is_attack=FALSE: both;
		gassensor.gas>70 & alarm.is_attack=FALSE: both;
		alarm.AlertState=both: {both, off, siren, strobe};
		alarm.AlertState=off: {both, off, siren, strobe};
		alarm.AlertState=siren: {both, off, siren, strobe};
		alarm.AlertState=strobe: {both, off, siren, strobe};
		TRUE: alarm.AlertState;
	esac;

	next(camera.MachineState) :=
	case
		alarm.AlertState=both & camera.is_attack=FALSE: takingphoto;
		camera.MachineState=takingphoto: on;
		camera.MachineState=off: {off, on};
		camera.MachineState=on: {off, on, takingphoto};
		camera.MachineState=takingphoto: {takingphoto};
		TRUE: camera.MachineState;
	esac;

	next(a_gas) :=
	case
		a_gas=100: {toint(a_gas)-1, a_gas};
		a_gas>100: {100};
		a_gas=0: {a_gas, a_gas+1};
		a_gas<0: {0};
		TRUE: {a_gas+-1, a_gas, a_gas+1};
	esac;

	next(a_smoke) :=
	case
		TRUE: {clear, detected, tested};
	esac;

	gassensor.gas:=
	case
		gassensor.is_attack=TRUE: 0..100;
		TRUE: a_gas;
	esac;

	smokesensor.smoke:=
	case
		smokesensor.is_attack=TRUE: {clear, detected, tested};
		TRUE: a_smoke;
	esac;

	next(sinaweibo.post_a) :=
	case
		sinaweibo.State=idle & next(sinaweibo.State)=posting: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.both_a) :=
	case
		alarm.AlertState!=both & next(alarm.AlertState)=both: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.off_a) :=
	case
		alarm.AlertState!=off & next(alarm.AlertState)=off: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.siren_a) :=
	case
		alarm.AlertState!=siren & next(alarm.AlertState)=siren: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.strobe_a) :=
	case
		alarm.AlertState!=strobe & next(alarm.AlertState)=strobe: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.on_a) :=
	case
		camera.MachineState=off & next(camera.MachineState)=on: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.off_a) :=
	case
		camera.MachineState=on & next(camera.MachineState)=off: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.takephoto_a) :=
	case
		camera.MachineState=on & next(camera.MachineState)=takingphoto: TRUE;
		TRUE: FALSE;
	esac;

	next(sinaweibo.trust_State_idle) :=
	case
		sinaweibo.is_attack=TRUE: untrusted;
		TRUE: sinaweibo.trust_State_idle;
	esac;

	next(sinaweibo.trust_State_posting) :=
	case
		sinaweibo.is_attack=TRUE: untrusted;
		camera.takephoto_a = TRUE & (camera.trust_MachineState_takingphoto=trusted): trusted;
		camera.takephoto_a = TRUE: untrusted;
		TRUE: sinaweibo.trust_State_posting;
	esac;

	next(alarm.trust_AlertState_both) :=
	case
		alarm.is_attack=TRUE: untrusted;
		smokesensor.smoke=detected & (smokesensor.trust_smoke=trusted): trusted;
		smokesensor.smoke=detected: untrusted;
		gassensor.gas>70 & (gassensor.trust_gas=trusted): trusted;
		gassensor.gas>70: untrusted;
		TRUE: alarm.trust_AlertState_both;
	esac;

	next(alarm.trust_AlertState_off) :=
	case
		alarm.is_attack=TRUE: untrusted;
		TRUE: alarm.trust_AlertState_off;
	esac;

	next(alarm.trust_AlertState_siren) :=
	case
		alarm.is_attack=TRUE: untrusted;
		TRUE: alarm.trust_AlertState_siren;
	esac;

	next(alarm.trust_AlertState_strobe) :=
	case
		alarm.is_attack=TRUE: untrusted;
		TRUE: alarm.trust_AlertState_strobe;
	esac;

	next(camera.trust_MachineState_on) :=
	case
		camera.is_attack=TRUE: untrusted;
		TRUE: camera.trust_MachineState_on;
	esac;

	next(camera.trust_MachineState_off) :=
	case
		camera.is_attack=TRUE: untrusted;
		TRUE: camera.trust_MachineState_off;
	esac;

	next(camera.trust_MachineState_takingphoto) :=
	case
		camera.is_attack=TRUE: untrusted;
		alarm.AlertState=both & (alarm.trust_AlertState_both=trusted): trusted;
		alarm.AlertState=both: untrusted;
		TRUE: camera.trust_MachineState_takingphoto;
	esac;

	next(sinaweibo.privacy_content) :=
	case
		camera.takephoto_a = TRUE: camera.privacy_photo;
		TRUE: sinaweibo.privacy_content;
	esac;

SPEC AG !(sinaweibo.State=posting & sinaweibo.trust_State_posting=untrusted & intensity<=2 & sinaweibo.is_attack=FALSE);
SPEC AG !(sinaweibo.privacy_content=private & intensity<=2);
