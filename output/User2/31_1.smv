--IF Door RFID.RFID = authorized THEN Door.unlock
--IF Weather.weather = rainy THEN Window.close

MODULE Weather
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_weather: {untrusted, trusted};
VAR
	weather: {sunny, rainy, snowy, cloudy, windy, foggy, stormy};
ASSIGN
	init(trust_weather):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE Window
FROZENVAR
	is_attack: boolean;
VAR
	WindowState: {closed, open};
	close_a: boolean;
	open_a: boolean;
	contact: {closed, open};
	trust_contact: {trusted};
	trust_WindowState_closed: {untrusted, trusted};
	trust_WindowState_open: {untrusted, trusted};
ASSIGN
	init(WindowState) := closed;
	init(close_a) := FALSE;
	init(open_a) := FALSE;
	init(trust_WindowState_closed) := trusted;
	init(trust_WindowState_open) := trusted;

MODULE DoorRFID
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_RFID: {untrusted, trusted};
VAR
	RFID: {authorized, notauthorized};
ASSIGN
	init(trust_RFID):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE Door
FROZENVAR
	is_attack: boolean;
VAR
	LockState: {locked, unlocked};
	lock_a: boolean;
	unlock_a: boolean;
	trust_LockState_locked: {untrusted, trusted};
	trust_LockState_unlocked: {untrusted, trusted};
ASSIGN
	init(LockState) := locked;
	init(lock_a) := FALSE;
	init(unlock_a) := FALSE;
	init(trust_LockState_locked) := trusted;
	init(trust_LockState_unlocked) := trusted;

MODULE main
FROZENVAR
	intensity: 0..50;
VAR
	weather: Weather;
	window: Window;
	doorrfid: DoorRFID;
	door: Door;
	a_weather: {sunny, rainy, snowy, cloudy, windy, foggy, stormy};
ASSIGN
	init(intensity) := 0 + toint(weather.is_attack) + toint(window.is_attack) + toint(doorrfid.is_attack) + toint(door.is_attack);

	next(window.WindowState) :=
	case
		weather.weather=rainy & window.is_attack=FALSE: closed;
		window.WindowState=closed: {closed, open};
		window.WindowState=open: {closed, open};
		TRUE: window.WindowState;
	esac;

	next(door.LockState) :=
	case
		doorrfid.RFID=authorized & door.is_attack=FALSE: unlocked;
		door.LockState=locked: {locked, unlocked};
		door.LockState=unlocked: {locked, unlocked};
		TRUE: door.LockState;
	esac;

	next(a_weather) :=
	case
		TRUE: {sunny, rainy, snowy, cloudy, windy, foggy, stormy};
	esac;

	weather.weather:=
	case
		weather.is_attack=TRUE: {sunny, rainy, snowy, cloudy, windy, foggy, stormy};
		TRUE: a_weather;
	esac;

	next(window.contact) :=
	case
		window.WindowState=closed: closed;
		window.WindowState=open: open;
		TRUE: window.contact;
	esac;

	next(doorrfid.RFID) :=
	case
		doorrfid.is_attack=TRUE: {authorized, notauthorized};
		TRUE: {authorized, notauthorized};
	esac;

	next(window.close_a) :=
	case
		window.WindowState!=closed & next(window.WindowState)=closed: TRUE;
		TRUE: FALSE;
	esac;

	next(window.open_a) :=
	case
		window.WindowState!=open & next(window.WindowState)=open: TRUE;
		TRUE: FALSE;
	esac;

	next(door.lock_a) :=
	case
		door.LockState!=locked & next(door.LockState)=locked: TRUE;
		TRUE: FALSE;
	esac;

	next(door.unlock_a) :=
	case
		door.LockState!=unlocked & next(door.LockState)=unlocked: TRUE;
		TRUE: FALSE;
	esac;

	next(window.trust_WindowState_closed) :=
	case
		window.is_attack=TRUE: untrusted;
		weather.weather=rainy & (weather.trust_weather=trusted): trusted;
		weather.weather=rainy: untrusted;
		TRUE: window.trust_WindowState_closed;
	esac;

	next(window.trust_WindowState_open) :=
	case
		window.is_attack=TRUE: untrusted;
		TRUE: window.trust_WindowState_open;
	esac;

	next(door.trust_LockState_locked) :=
	case
		door.is_attack=TRUE: untrusted;
		TRUE: door.trust_LockState_locked;
	esac;

	next(door.trust_LockState_unlocked) :=
	case
		door.is_attack=TRUE: untrusted;
		doorrfid.RFID=authorized & (doorrfid.trust_RFID=trusted): trusted;
		doorrfid.RFID=authorized: untrusted;
		TRUE: door.trust_LockState_unlocked;
	esac;

SPEC AG !(window.WindowState=open & window.trust_WindowState_open=untrusted & intensity<=2 & window.is_attack=FALSE);
SPEC AG !(door.LockState=unlocked & door.trust_LockState_unlocked=untrusted & intensity<=2 & door.is_attack=FALSE);
