--IF Smoke Sensor.smoke = detected THEN Alarm.both
--IF Alarm.AlertState = both & Motion Detector.motion = active THEN Window.open
--IF Gas Sensor.gas > 20 THEN Alarm.both

MODULE MotionDetector
FROZENVAR
	trust_motion: {untrusted, trusted};
VAR
	motion: {active, inactive};
ASSIGN
	init(trust_motion):= trusted;

MODULE Window
VAR
	WindowState: {closed, open};
	close_a: boolean;
	open_a: boolean;
	contact: {closed, open};
	trust_contact: {trusted};
	trust_WindowState_closed: {untrusted, trusted};
	trust_WindowState_open: {untrusted, trusted};
ASSIGN
	init(WindowState) := closed;
	init(close_a) := FALSE;
	init(open_a) := FALSE;
	init(trust_WindowState_closed) := trusted;
	init(trust_WindowState_open) := trusted;

MODULE GasSensor
FROZENVAR
	trust_gas: {untrusted, trusted};
VAR
	gas: 0..100;
ASSIGN
	init(trust_gas):= untrusted;

MODULE SmokeSensor
FROZENVAR
	trust_smoke: {untrusted, trusted};
VAR
	smoke: {clear, detected, tested};
ASSIGN
	init(trust_smoke):= untrusted;

MODULE Alarm
VAR
	AlertState: {both, off, siren, strobe};
	both_a: boolean;
	off_a: boolean;
	siren_a: boolean;
	strobe_a: boolean;
	trust_AlertState_both: {untrusted, trusted};
	trust_AlertState_off: {untrusted, trusted};
	trust_AlertState_siren: {untrusted, trusted};
	trust_AlertState_strobe: {untrusted, trusted};
ASSIGN
	init(AlertState) := both;
	init(both_a) := FALSE;
	init(off_a) := FALSE;
	init(siren_a) := FALSE;
	init(strobe_a) := FALSE;
	init(trust_AlertState_both) := trusted;
	init(trust_AlertState_off) := trusted;
	init(trust_AlertState_siren) := trusted;
	init(trust_AlertState_strobe) := trusted;

MODULE main
VAR
	motiondetector: MotionDetector;
	window: Window;
	gassensor: GasSensor;
	smokesensor: SmokeSensor;
	alarm: Alarm;
	a_motion: {active, inactive};
	a_gas: 0..100;
	a_smoke: {clear, detected, tested};
ASSIGN
	next(window.WindowState) :=
	case
		alarm.AlertState=both & motiondetector.motion=active: open;
		window.WindowState=closed: {closed, open};
		window.WindowState=open: {closed, open};
		TRUE: window.WindowState;
	esac;

	next(alarm.AlertState) :=
	case
		smokesensor.smoke=detected: both;
		gassensor.gas>20: both;
		alarm.AlertState=both: {both, off, siren, strobe};
		alarm.AlertState=off: {both, off, siren, strobe};
		alarm.AlertState=siren: {both, off, siren, strobe};
		alarm.AlertState=strobe: {both, off, siren, strobe};
		TRUE: alarm.AlertState;
	esac;

	next(a_motion) :=
	case
		TRUE: {active, inactive};
	esac;

	next(a_gas) :=
	case
		a_gas=100: {toint(a_gas)-1, a_gas};
		a_gas>100: {100};
		a_gas=0: {a_gas, a_gas+1};
		a_gas<0: {0};
		TRUE: {a_gas+-1, a_gas, a_gas+1};
	esac;

	next(a_smoke) :=
	case
		TRUE: {clear, detected, tested};
	esac;

	motiondetector.motion := a_motion;

	next(window.contact) :=
	case
		window.WindowState=closed: closed;
		window.WindowState=open: open;
		TRUE: window.contact;
	esac;

	gassensor.gas := a_gas;

	smokesensor.smoke := a_smoke;

	next(window.close_a) :=
	case
		window.WindowState!=closed & next(window.WindowState)=closed: TRUE;
		TRUE: FALSE;
	esac;

	next(window.open_a) :=
	case
		window.WindowState!=open & next(window.WindowState)=open: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.both_a) :=
	case
		alarm.AlertState!=both & next(alarm.AlertState)=both: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.off_a) :=
	case
		alarm.AlertState!=off & next(alarm.AlertState)=off: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.siren_a) :=
	case
		alarm.AlertState!=siren & next(alarm.AlertState)=siren: TRUE;
		TRUE: FALSE;
	esac;

	next(alarm.strobe_a) :=
	case
		alarm.AlertState!=strobe & next(alarm.AlertState)=strobe: TRUE;
		TRUE: FALSE;
	esac;

	next(window.trust_WindowState_closed) :=
	case
		TRUE: window.trust_WindowState_closed;
	esac;

	next(window.trust_WindowState_open) :=
	case
		alarm.AlertState=both & motiondetector.motion=active & (alarm.trust_AlertState_both=trusted | motiondetector.trust_motion=trusted): trusted;
		alarm.AlertState=both & motiondetector.motion=active: untrusted;
		TRUE: window.trust_WindowState_open;
	esac;

	next(alarm.trust_AlertState_both) :=
	case
		smokesensor.smoke=detected & (smokesensor.trust_smoke=trusted): trusted;
		smokesensor.smoke=detected: untrusted;
		gassensor.gas>20 & (gassensor.trust_gas=trusted): trusted;
		gassensor.gas>20: untrusted;
		TRUE: alarm.trust_AlertState_both;
	esac;

	next(alarm.trust_AlertState_off) :=
	case
		TRUE: alarm.trust_AlertState_off;
	esac;

	next(alarm.trust_AlertState_siren) :=
	case
		TRUE: alarm.trust_AlertState_siren;
	esac;

	next(alarm.trust_AlertState_strobe) :=
	case
		TRUE: alarm.trust_AlertState_strobe;
	esac;

SPEC AG !(window.WindowState=open & window.trust_WindowState_open=untrusted);
