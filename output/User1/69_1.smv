--IF Door RFID.RFID = authorized THEN Door.unlock
--IF Camera.off THEN Door.unlock
--IF Illuminance Sensor.illuminance < 9 THEN Door.lock
--IF Door RFID.RFID = not authorized THEN Camera.take photo
--IF Smoke Sensor.smoke = detected THEN Window.open
--IF Air Quality Monitor.airQuality > 20 THEN Window.close

MODULE Window
FROZENVAR
	is_attack: boolean;
VAR
	WindowState: {closed, open};
	close_a: boolean;
	open_a: boolean;
	contact: {closed, open};
	trust_contact: {trusted};
	trust_WindowState_closed: {untrusted, trusted};
	trust_WindowState_open: {untrusted, trusted};
ASSIGN
	init(WindowState) := closed;
	init(close_a) := FALSE;
	init(open_a) := FALSE;
	init(trust_WindowState_closed) := trusted;
	init(trust_WindowState_open) := trusted;

MODULE IlluminanceSensor
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_illuminance: {untrusted, trusted};
VAR
	illuminance: 0..100;
ASSIGN
	init(trust_illuminance):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE DoorRFID
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_RFID: {untrusted, trusted};
VAR
	RFID: {authorized, notauthorized};
ASSIGN
	init(trust_RFID):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE SmokeSensor
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_smoke: {untrusted, trusted};
VAR
	smoke: {clear, detected, tested};
ASSIGN
	init(trust_smoke):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE AirQualityMonitor
FROZENVAR
	is_attack: boolean;
FROZENVAR
	trust_airQuality: {untrusted, trusted};
	trust_carbonDioxide: {untrusted, trusted};
VAR
	airQuality: 0..100;
	carbonDioxide: 0..100;
ASSIGN
	init(trust_airQuality):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;
	init(trust_carbonDioxide):=
	case
		is_attack=TRUE: untrusted;
		TRUE: trusted;
	esac;

MODULE Camera
FROZENVAR
	is_attack: boolean;
VAR
	MachineState: {off, on, takingphoto};
	on_a: boolean;
	off_a: boolean;
	takephoto_a: boolean;
	trust_MachineState_off: {untrusted, trusted};
	trust_MachineState_on: {untrusted, trusted};
	trust_MachineState_takingphoto: {untrusted, trusted};
	privacy_photo: {private};
ASSIGN
	init(MachineState) := on;
	init(on_a) := FALSE;
	init(off_a) := FALSE;
	init(takephoto_a) := FALSE;
	init(trust_MachineState_on) := trusted;
	init(trust_MachineState_off) := trusted;
	init(trust_MachineState_takingphoto) := trusted;

MODULE Door
FROZENVAR
	is_attack: boolean;
VAR
	LockState: {locked, unlocked};
	lock_a: boolean;
	unlock_a: boolean;
	trust_LockState_locked: {untrusted, trusted};
	trust_LockState_unlocked: {untrusted, trusted};
ASSIGN
	init(LockState) := locked;
	init(lock_a) := FALSE;
	init(unlock_a) := FALSE;
	init(trust_LockState_locked) := trusted;
	init(trust_LockState_unlocked) := trusted;

MODULE main
FROZENVAR
	intensity: 0..50;
VAR
	window: Window;
	illuminancesensor: IlluminanceSensor;
	doorrfid: DoorRFID;
	smokesensor: SmokeSensor;
	airqualitymonitor: AirQualityMonitor;
	camera: Camera;
	door: Door;
	a_airQuality: 0..100;
	a_illuminance: 0..100;
	a_smoke: {clear, detected, tested};
	a_carbonDioxide: 0..100;
ASSIGN
	init(intensity) := 0 + toint(window.is_attack) + toint(illuminancesensor.is_attack) + toint(doorrfid.is_attack) + toint(smokesensor.is_attack) + toint(airqualitymonitor.is_attack) + toint(camera.is_attack) + toint(door.is_attack);

	next(window.WindowState) :=
	case
		smokesensor.smoke=detected & window.is_attack=FALSE: open;
		airqualitymonitor.airQuality>20 & window.is_attack=FALSE: closed;
		window.WindowState=closed: {closed, open};
		window.WindowState=open: {closed, open};
		TRUE: window.WindowState;
	esac;

	next(camera.MachineState) :=
	case
		doorrfid.RFID=notauthorized & camera.is_attack=FALSE: takingphoto;
		camera.MachineState=takingphoto: on;
		camera.MachineState=off: {off, on};
		camera.MachineState=on: {off, on, takingphoto};
		camera.MachineState=takingphoto: {takingphoto};
		TRUE: camera.MachineState;
	esac;

	next(door.LockState) :=
	case
		doorrfid.RFID=authorized & door.is_attack=FALSE: unlocked;
		camera.off_a = TRUE & door.is_attack=FALSE: unlocked;
		illuminancesensor.illuminance<9 & door.is_attack=FALSE: locked;
		door.LockState=locked: {locked, unlocked};
		door.LockState=unlocked: {locked, unlocked};
		TRUE: door.LockState;
	esac;

	next(a_airQuality) :=
	case
		a_airQuality=100: {toint(a_airQuality)-1, a_airQuality};
		a_airQuality>100: {100};
		a_airQuality=0: {a_airQuality, a_airQuality+1};
		a_airQuality<0: {0};
		TRUE: {a_airQuality+-1, a_airQuality, a_airQuality+1};
	esac;

	next(a_illuminance) :=
	case
		a_illuminance=100: {toint(a_illuminance)-1, a_illuminance};
		a_illuminance>100: {100};
		a_illuminance=0: {a_illuminance, a_illuminance+1};
		a_illuminance<0: {0};
		TRUE: {a_illuminance+-1, a_illuminance, a_illuminance+1};
	esac;

	next(a_smoke) :=
	case
		TRUE: {clear, detected, tested};
	esac;

	next(a_carbonDioxide) :=
	case
		a_carbonDioxide=100: {toint(a_carbonDioxide)-1, a_carbonDioxide};
		a_carbonDioxide>100: {100};
		a_carbonDioxide=0: {a_carbonDioxide, a_carbonDioxide+1};
		a_carbonDioxide<0: {0};
		TRUE: {a_carbonDioxide+-1, a_carbonDioxide, a_carbonDioxide+1};
	esac;

	next(window.contact) :=
	case
		window.WindowState=closed: closed;
		window.WindowState=open: open;
		TRUE: window.contact;
	esac;

	illuminancesensor.illuminance:=
	case
		illuminancesensor.is_attack=TRUE: 0..100;
		TRUE: a_illuminance;
	esac;

	next(doorrfid.RFID) :=
	case
		doorrfid.is_attack=TRUE: {authorized, notauthorized};
		TRUE: {authorized, notauthorized};
	esac;

	smokesensor.smoke:=
	case
		smokesensor.is_attack=TRUE: {clear, detected, tested};
		TRUE: a_smoke;
	esac;

	airqualitymonitor.airQuality:=
	case
		airqualitymonitor.is_attack=TRUE: 0..100;
		TRUE: a_airQuality;
	esac;

	airqualitymonitor.carbonDioxide:=
	case
		airqualitymonitor.is_attack=TRUE: 0..100;
		TRUE: a_carbonDioxide;
	esac;

	next(window.close_a) :=
	case
		window.WindowState!=closed & next(window.WindowState)=closed: TRUE;
		TRUE: FALSE;
	esac;

	next(window.open_a) :=
	case
		window.WindowState!=open & next(window.WindowState)=open: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.on_a) :=
	case
		camera.MachineState=off & next(camera.MachineState)=on: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.off_a) :=
	case
		camera.MachineState=on & next(camera.MachineState)=off: TRUE;
		TRUE: FALSE;
	esac;

	next(camera.takephoto_a) :=
	case
		camera.MachineState=on & next(camera.MachineState)=takingphoto: TRUE;
		TRUE: FALSE;
	esac;

	next(door.lock_a) :=
	case
		door.LockState!=locked & next(door.LockState)=locked: TRUE;
		TRUE: FALSE;
	esac;

	next(door.unlock_a) :=
	case
		door.LockState!=unlocked & next(door.LockState)=unlocked: TRUE;
		TRUE: FALSE;
	esac;

	next(window.trust_WindowState_closed) :=
	case
		window.is_attack=TRUE: untrusted;
		airqualitymonitor.airQuality>20 & (airqualitymonitor.trust_airQuality=trusted): trusted;
		airqualitymonitor.airQuality>20: untrusted;
		TRUE: window.trust_WindowState_closed;
	esac;

	next(window.trust_WindowState_open) :=
	case
		window.is_attack=TRUE: untrusted;
		smokesensor.smoke=detected & (smokesensor.trust_smoke=trusted): trusted;
		smokesensor.smoke=detected: untrusted;
		TRUE: window.trust_WindowState_open;
	esac;

	next(camera.trust_MachineState_on) :=
	case
		camera.is_attack=TRUE: untrusted;
		TRUE: camera.trust_MachineState_on;
	esac;

	next(camera.trust_MachineState_off) :=
	case
		camera.is_attack=TRUE: untrusted;
		TRUE: camera.trust_MachineState_off;
	esac;

	next(camera.trust_MachineState_takingphoto) :=
	case
		camera.is_attack=TRUE: untrusted;
		doorrfid.RFID=notauthorized & (doorrfid.trust_RFID=trusted): trusted;
		doorrfid.RFID=notauthorized: untrusted;
		TRUE: camera.trust_MachineState_takingphoto;
	esac;

	next(door.trust_LockState_locked) :=
	case
		door.is_attack=TRUE: untrusted;
		illuminancesensor.illuminance<9 & (illuminancesensor.trust_illuminance=trusted): trusted;
		illuminancesensor.illuminance<9: untrusted;
		TRUE: door.trust_LockState_locked;
	esac;

	next(door.trust_LockState_unlocked) :=
	case
		door.is_attack=TRUE: untrusted;
		doorrfid.RFID=authorized & (doorrfid.trust_RFID=trusted): trusted;
		doorrfid.RFID=authorized: untrusted;
		camera.off_a = TRUE & (camera.trust_MachineState_off=trusted): trusted;
		camera.off_a = TRUE: untrusted;
		TRUE: door.trust_LockState_unlocked;
	esac;

SPEC AG !(window.WindowState=open & window.trust_WindowState_open=untrusted & intensity<=1 & window.is_attack=FALSE);
SPEC AG !(door.LockState=unlocked & door.trust_LockState_unlocked=untrusted & intensity<=1 & door.is_attack=FALSE);
